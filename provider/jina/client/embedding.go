package jina

import (
	"go.jetify.com/ai/provider/jina/client/option"
)

// EmbeddingService contains methods and other services that help with interacting
// with the embedding API.
//
// Note, unlike clients, this service does not read variables from the environment
// automatically. You should not instantiate this service directly, and instead use
// the [NewEmbeddingService] method instead.
type EmbeddingService struct {
	Options []option.RequestOption
}

type CreateEmbeddingResponse struct {
	// The list of embeddings generated by the model.
	Data []Embedding `json:"data"`
	// The name of the model used to generate the embedding.
	Model string `json:"model"`
	// The object type, which is always "list".
	Object string `json:"object"`
	// The usage information for the request.
	Usage CreateEmbeddingResponseUsage `json:"usage"`
}

// The usage information for the request.
type CreateEmbeddingResponseUsage struct {
	// The number of tokens used by the prompt.
	PromptTokens int64 `json:"prompt_tokens,required"`
	// The total number of tokens used by the request.
	TotalTokens int64 `json:"total_tokens,required"`
}

// Represents an embedding vector returned by embedding endpoint.
type Embedding struct {
	// The embedding vector, which is a list of floats. The length of vector depends on the model.
	Embedding []float64 `json:"embedding"`
	// The index of the embedding in the list of embeddings.
	Index int64 `json:"index"`
	// The object type, which is always "embedding".
	Object string `json:"object"`
}

type EmbeddingModel = string

const (
	// v4: Universal multimodal multilingual embeddings (3.8B params)
	EmbeddingModelJinaEmbeddingsV4 EmbeddingModel = "jina-embeddings-v4"

	// Multilingual multimodal text & image embeddings
	EmbeddingModelJinaClipV2 EmbeddingModel = "jina-clip-v2"

	// Frontier multilingual embeddings (SOTA text-only)
	EmbeddingModelJinaEmbeddingsV3 EmbeddingModel = "jina-embeddings-v3"

	// Multimodal embeddings for images and English text (deprecated)
	EmbeddingModelJinaClipV1 EmbeddingModel = "jina-clip-v1"

	// Spanish-English bilingual embeddings
	EmbeddingModelJinaEmbeddingsV2BaseEs EmbeddingModel = "jina-embeddings-v2-base-es"

	// Code/docstring-optimized embeddings
	EmbeddingModelJinaEmbeddingsV2BaseCode EmbeddingModel = "jina-embeddings-v2-base-code"

	// German-English bilingual embeddings
	EmbeddingModelJinaEmbeddingsV2BaseDe EmbeddingModel = "jina-embeddings-v2-base-de"

	// Chinese-English bilingual embeddings
	EmbeddingModelJinaEmbeddingsV2BaseZh EmbeddingModel = "jina-embeddings-v2-base-zh"

	// English-only embeddings (deprecated)
	EmbeddingModelJinaEmbeddingsV2BaseEn EmbeddingModel = "jina-embeddings-v2-base-en"
)

type embeddingNewParams[T any] struct {
	// Input text to embed, encoded as a string or array of tokens. To embed multiple
	// inputs in a single request, pass an array of strings or array of token arrays.
	// The input must not exceed the max input tokens for the model (8192 tokens for
	// all embedding models), cannot be an empty string, and any array must be 2048
	// dimensions or less.
	// [Example Python code](https://cookbook.openai.com/examples/how_to_count_tokens_with_tiktoken)
	// for counting tokens. In addition to the per-input token limit, all embedding
	// models enforce a maximum of 300,000 tokens summed across all inputs in a single
	// request.
	Input T `json:"input"`
	// Task to perform. e.g. "text-matching", "retrieval.query", "retrieval.passage".
	Task *string `json:"task,omitempty"`
	// ID of the model to use.
	Model EmbeddingModel `json:"model"`
	// The number of dimensions the resulting output embeddings should have. Only
	// supported in `text-embedding-3` and later models.
	Dimensions *int64 `json:"dimensions,omitempty"`
	// // The format to return the embeddings in. Can be either `float` or
	// // [`base64`](https://pypi.org/project/pybase64/).
	// //
	// // Any of "float", "base64".
	// EncodingFormat *EmbeddingNewParamsEncodingFormat `json:"encoding_format,omitempty"`
}

// The format to return the embeddings in. Can be either `float` or
// [`base64`](https://pypi.org/project/pybase64/).
type EmbeddingNewParamsEncodingFormat string

const (
	EmbeddingNewParamsEncodingFormatFloat  EmbeddingNewParamsEncodingFormat = "float"
	EmbeddingNewParamsEncodingFormatBase64 EmbeddingNewParamsEncodingFormat = "base64"
)

// NewEmbeddingService generates a new service that applies the given options to
// each request. These options are applied after the parent client's options (if
// there is one), and before any request-specific options.
func NewEmbeddingService(opts ...option.RequestOption) (r EmbeddingService) {
	r = EmbeddingService{}
	r.Options = opts
	return
}
